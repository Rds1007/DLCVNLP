# -*- coding: utf-8 -*-
"""Image_classification_resnet50.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/144tV6o_Fmg_c150BfNqPnbavc0tLLD54
"""

!pip install tensorflow==1.14.0

!pip install keras==2.3.1

import tensorflow as tf
import keras
from keras.applications.resnet50 import ResNet50, preprocess_input
from keras.applications.resnet import ResNet50
from keras.applications.resnet import decode_predictions
from keras.applications.resnet import preprocess_input
from keras.models import Model,Sequential
from keras.layers import Input,UpSampling2D,Flatten,BatchNormalization,Dense,Dropout,GlobalAveragePooling2D
from keras import optimizers
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import time
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from glob import glob
from PIL import Image

!nvidia-smi

from google.colab import drive
drive.mount('/content/drive')

"""## Data is under 'Advance Computer Vision - Part1' tab in dashboard name as 'Sample Dataset'"""

!unzip /content/data.zip

IMAGE_SIZE = [224, 224]#Give dataset path
train = '/content/drive/My Drive/VGG/data/train'
test = '/content/drive/My Drive/VGG/data/test'

# useful for getting number of classes
folders = glob('/content/drive/My Drive/VGG/data/train/*')
print(len(folders))
num_classes = 4
nb_epochs = 10

# Fixed for our dataset
NUM_CLASSES = 4

# Fixed for Cats & Dogs color images
CHANNELS = 3

IMAGE_RESIZE = 224
RESNET50_POOLING_AVERAGE = 'avg'
DENSE_LAYER_ACTIVATION = 'softmax'
OBJECTIVE_FUNCTION = 'categorical_crossentropy'

# Common accuracy metric for all outputs, but can use different metrics for different output
LOSS_METRICS = ['accuracy']

# EARLY_STOP_PATIENCE must be < NUM_EPOCHS
NUM_EPOCHS = 10
EARLY_STOP_PATIENCE = 3

# These steps value should be proper FACTOR of no.-of-images in train & valid folders respectively
# Training images processed in each step would be no.-of-train-images / STEPS_PER_EPOCH_TRAINING
STEPS_PER_EPOCH_TRAINING = 10
STEPS_PER_EPOCH_VALIDATION = 10

# These steps value should be proper FACTOR of no.-of-images in train & valid folders respectively
# NOTE that these BATCH* are for Keras ImageDataGenerator batching to fill epoch step input
BATCH_SIZE_TRAINING = 100
BATCH_SIZE_VALIDATION = 100

resnet=ResNet50(include_top=False, weights='imagenet',input_shape=IMAGE_SIZE + [3])

from keras.models import Model,Sequential
model = Sequential()

# 1st layer as the lumpsum weights from resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5
# NOTE that this layer will be set below as NOT TRAINABLE, i.e., use it as is
model.add(ResNet50(include_top = False, pooling = RESNET50_POOLING_AVERAGE, weights = 'imagenet'))

# 2nd layer as Dense for 2-class classification, i.e., dog or cat using SoftMax activation
model.add(Dense(NUM_CLASSES, activation = DENSE_LAYER_ACTIVATION))

# Say not to train first layer (ResNet) model as it is already trained
model.layers[0].trainable = False

model.summary()

from keras import optimizers

sgd = optimizers.SGD(lr = 0.01, decay = 1e-6, momentum = 0.9, nesterov = True)
model.compile(optimizer = sgd, loss = OBJECTIVE_FUNCTION, metrics = LOSS_METRICS)

from keras.applications.resnet50 import preprocess_input
from keras.preprocessing.image import ImageDataGenerator

image_size = IMAGE_RESIZE

data_generator = ImageDataGenerator(preprocessing_function=preprocess_input)

train_generator = data_generator.flow_from_directory(
        '/content/drive/My Drive/VGG/data/train',
        target_size=(image_size, image_size),
        batch_size=BATCH_SIZE_TRAINING,
        class_mode='categorical')


validation_generator = data_generator.flow_from_directory(
        '/content/drive/My Drive/VGG/data/test',
        target_size=(image_size, image_size),
        batch_size=BATCH_SIZE_VALIDATION,
        class_mode='categorical')

# Data Augmentation
train_datagen = ImageDataGenerator(
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest')


# Data Augmentation
test_datagen = ImageDataGenerator(
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest')

fit_history = model.fit_generator(
        train_generator,
        steps_per_epoch=STEPS_PER_EPOCH_TRAINING,
        epochs = NUM_EPOCHS,
        validation_data=validation_generator,
        validation_steps=STEPS_PER_EPOCH_VALIDATION
        
)

model.save("/content/drive/My Drive/resnet/mymodelresnet1.h5")
print("Saved model to disk")

import numpy as np

from keras.preprocessing import image

from tensorflow.python.keras.models import load_model

test_image = image.load_img('/content/drive/My Drive/VGG/data/train/watch/00000017.png', target_size = (224, 224))

#show image
from IPython.display import display # to display images

img = Image.open('/content/drive/My Drive/VGG/data/train/glasses/00000002.jpg')
display(img)

test_image = image.img_to_array(test_image)

test_image = np.expand_dims(test_image, axis = 0)

model = load_model('/content/drive/My Drive/resnet/mymodelresnet1.h5')

result = model.predict(test_image)

result = result[0]

classes = ['backpack','footwear', 'glasses', 'watch']

label_name = {classes[i]: result[i] for i in range(len(result))}
label_name

output = max(label_name, key=label_name.get)
print(output)

"""# New Section

# New Section
"""