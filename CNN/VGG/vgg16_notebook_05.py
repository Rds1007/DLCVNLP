# -*- coding: utf-8 -*-
"""VGG16_notebook_05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qebFkTKO32CbBc9Ot9CRImDYEnU9smez
"""

#!pip install tensorflow==1.14.0

#!pip install keras==2.3.1

from keras.layers import Input, Lambda, Dense, Flatten
from keras.models import Model
from keras.applications.vgg16 import VGG16
from keras.applications.vgg16 import preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings("ignore", category=FutureWarning)

from google.colab import drive
drive.mount('/content/drive')

IMAGE_SIZE = [224, 224]

#Give dataset path
train_path = '/content/drive/My Drive/Multiclass_cnn/Multi'
test_path = '/content/drive/My Drive/Multiclass_cnn/Multi_test'

vgg = VGG16(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)

print(vgg.output)
print(vgg.input)

#ls -lart /content/drive/'My Drive'/VGG/mymodel.h5

len(vgg.layers)

# don't train existing weights
for layer in vgg.layers:
  layer.trainable = False

# useful for getting number of classes
folders = glob('/content/drive/My Drive/Multiclass_cnn/Multi_test/*')
print(len(folders))

x = Flatten()(vgg.output)
prediction = Dense(len(folders), activation='softmax')(x)
model = Model(inputs=vgg.input, outputs=prediction)
model.summary()

from keras import optimizers
sgd = optimizers.SGD(lr=0.01, decay=1e-6, momentum=0.9)
model.compile(loss='categorical_crossentropy',
              optimizer=sgd,
              metrics=['accuracy'])

# Data Augmentation
train_datagen = ImageDataGenerator(
    preprocessing_function=preprocess_input,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest')

# Data Augmentation
test_datagen = ImageDataGenerator(
    preprocessing_function=preprocess_input,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest')

# Make sure you provide the same target size as initialied for the image size
train_set = train_datagen.flow_from_directory('/content/drive/My Drive/Multiclass_cnn/Multi',
                                                 target_size = (224, 224),
                                                 batch_size = 100,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory('/content/drive/My Drive/Multiclass_cnn/Multi_test',
                                            target_size = (224, 224),
                                            batch_size = 100,
                                            class_mode = 'categorical')

from datetime import datetime
from keras.callbacks import ModelCheckpoint, LearningRateScheduler
from keras.callbacks import ReduceLROnPlateau

#lr_scheduler = LearningRateScheduler(lr_schedule)

#lr_reducer = ReduceLROnPlateau(factor=np.sqrt(0.1),
#                               cooldown=0,
#                               patience=5,
#                               min_lr=0.5e-6)

#num_epochs = 1000
#num_batch_size = 32

checkpoint = ModelCheckpoint(filepath='/content/drive/My Drive/Multiclass_cnn/vgg16_mymodel_5.h5', 
                               verbose=1, save_best_only=True)

callbacks = [checkpoint]

start = datetime.now()

model.fit_generator(
  train_set,
  validation_data=test_set,
  epochs=15,
  steps_per_epoch=10,
  validation_steps=10,
    callbacks=callbacks ,verbose=1)


duration = datetime.now() - start
print("Training completed in time: ", duration)

import numpy as np

from keras.preprocessing import image
from tensorflow.python.keras.models import load_model
test_image = image.load_img('/content/drive/My Drive/Multiclass_cnn/Multi/cow/cow138.jpg', target_size = (224, 224))

#show image
from IPython.display import display # to display images
from PIL import Image
from keras.preprocessing import image
img = Image.open('/content/drive/My Drive/Multiclass_cnn/Multi/cow/cow138.jpg')
display(img)

test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
model = load_model('/content/drive/My Drive/Multiclass_cnn/vgg16_mymodel_5.h5')
result = model.predict(test_image)
result = result[0]
classes = ['cat','cow', 'horse', 'nikita','ram']

label_name = {classes[i]: result[i] for i in range(len(result))}
label_name

output = max(label_name, key=label_name.get)
print(output)

import tensorflow as tf
print(tf.__version__)